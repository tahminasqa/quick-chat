@namespace Quick.Chat.EmojiPicker.Sub
@using System
@using System.IO;
@using Blazor.FileReader
@using System.Net.Http
@using System.Threading

@inject HttpClient Http
@inject IFileReaderService fileReaderService;

<style>
    .@dropTargetClass {
        display: block;
        padding: 20px;
        margin-bottom: 10px;
        border: 1px dashed black;
        border-radius: 5px;
        position: relative;
    }
    .@dropTargetDragClass {
        border-color: orangered;
        font-weight: bold;
    }
    input.clickable {
        position: absolute;
        width: 100%;
        height: 100%;
        opacity: 0;
        margin-top: -20px;
        margin-left: -20px;
        cursor: pointer;
    }
</style>

<div class="@IpDropClass">
    <input type="file"
           class="clickable"
           @ref=dropTargetInput
           @onchange="OnInputChange"
           @ondragenter=OnIpDragEnter
           @ondragleave=OnIpDragLeave
           multiple />
    Drop Files here or click me.

    @foreach (var fileInfo in IpFileList)
    {
        <br />@fileInfo.Name
    }
</div>


@code {
        [Parameter] public string FileUploadRoute { get; set; }
        [Parameter] public Action<List<string>> AddFiles { get; set; }
        [Parameter] public CancellationToken CancellationToken { get; set; }

        ElementReference dropTargetInput;
        IFileReaderRef ipReference;

        const string dropTargetDragClass = "droptarget-drag";
        const string dropTargetClass = "droptarget";

    private List<string> _ipdropClasses = new List<string>() { dropTargetClass };

    string IpDropClass => string.Join(" ", _ipdropClasses);

    List<IFileInfo> IpFileList { get; } = new List<IFileInfo>();

    protected override void OnAfterRender(bool isFirstRender)
    {
        if (isFirstRender)
        {
            ipReference = fileReaderService.CreateReference(dropTargetInput);
        }
    }

    public void OnIpDragEnter(EventArgs e)
    {
        _ipdropClasses.Add(dropTargetDragClass);
    }

    public void OnIpDragLeave(EventArgs e)
    {
        _ipdropClasses.Remove(dropTargetDragClass);
    }

    public async Task OnInputChange(EventArgs e)
    {
        _ipdropClasses.Remove(dropTargetDragClass);
        this.StateHasChanged();
        await this.RefreshIpFileList();
    }

    private Task RefreshIpFileList()
    {
        return RefreshFileList(ipReference, IpFileList);
    }

    private async Task RefreshFileList(IFileReaderRef reader, List<IFileInfo> list)
    {
        list.Clear();
        foreach (var file in await reader.EnumerateFilesAsync())
        {
            IFileInfo fileInfo = await file.ReadFileInfoAsync();
            list.Add(fileInfo);
        }
        // this.StateHasChanged();
        await ReadFile(ipReference);
    }

    public async Task ReadFile(IFileReaderRef list)
    {
        this.StateHasChanged();
        string nl = Environment.NewLine;
        IEnumerable<IFileReference> fileList = await list.EnumerateFilesAsync();
        List<string> imgUriList = new List<string>();

        foreach (var file in fileList)
        {
            var fileInfo = await file.ReadFileInfoAsync();
            this.StateHasChanged();

            using (AsyncDisposableStream fs = await file.OpenReadAsync())
            {
                var bufferSize = fs.Length; // 20480
                var buffer = new byte[bufferSize];
                int count;
                while ((count = await fs.ReadAsync(buffer, 0, buffer.Length)) != 0)
                {
                    imgUriList.Add(await UploadFile(buffer));

                    this.StateHasChanged();
                }
            }
            this.StateHasChanged();
        }

        this.AddFiles(imgUriList);
    }

    private async Task<string> UploadFile(byte[] img)
    {
        HttpResponseMessage resp;
        if (CancellationToken == null)
        {
            resp = await Http.PostAsync(FileUploadRoute, new ByteArrayContent(img));
        }
        else
        {
            resp = await Http.PostAsync(FileUploadRoute, new ByteArrayContent(img), CancellationToken);
        }
        string fileName = await resp.Content.ReadAsStringAsync();
        return fileName;
    }
}
